{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_this$props","this","props","name","email","id","react_default","a","createElement","className","src","concat","alt","Component","CardList","robots","map","user","i","components_Card","key","SearchBox","onChange","searchChange","type","placeholder","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","App","onSearchChange","event","searchField","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","components_SearchBox","components_Scroll","containers_ErrorBoundry","components_CardList","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9e3d86c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React,{ Component } from 'react';\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        let { name,email,id } = this.props;\r\n       return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default Card;","import React,{ Component } from 'react';\r\nimport Card from './Card';\r\n\r\nclass CardList extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.robots.map((user,i) => {\r\n                        return (\r\n                            <Card \r\n                                key={i} \r\n                                id={user.id} \r\n                                name={user.name} \r\n                                email={user.email} \r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React,{ Component } from 'react';\r\n\r\nclass SearchBox extends Component {\r\n    render() {\r\n        return (\r\n            <div className='pa2'>\r\n                <input onChange={this.props.searchChange} className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots' />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React,{ Component } from 'react';\r\n\r\nclass Scroll extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React,{ Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>OOOPS!</h1>\r\n        }else{\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React,{ Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then( response => response.json())\r\n        .then( users => this.setState({robots: users}));\r\n    }\r\n\r\n    onSearchChange = event => {\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        let { robots,searchField } = this.state;\r\n        let filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\r\n        });\r\n        return !robots.length? <h1 className='tc'>Loading!</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f2'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}